# /docker-stack/docker-compose.yml

version: "3.9"

services:
  # -------------------- TRAEFIK (REVERSE PROXY) --------------------
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # Volume para os certificados autoassinados
      - ./traefik/certs:/certs:ro
    environment:
      - TZ=${TZ}
    networks:
      - proxy
      - nginx-net # Traefik precisa estar em ambas as redes para rotear o tráfego
    labels:
      - "traefik.enable=true"
      # Roteador para o dashboard do Traefik
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=authentik@docker"

  # -------------------- AUTHENTIK (SSO) --------------------
  authentik-postgres:
    image: postgres:15-alpine
    container_name: authentik-postgres
    restart: unless-stopped
    volumes:
      - authentik-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${AUTHENTIK_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AUTHENTIK_POSTGRES_DB}
    networks:
      - authentik-internal

  authentik-redis:
    image: redis:alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - authentik-internal

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    restart: unless-stopped
    depends_on: [authentik-postgres, authentik-redis]
    command: server
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - TZ=${TZ}
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - ./authentik/geoip:/geoip
    networks:
      - proxy
      - authentik-internal
    labels:
      - "traefik.enable=true"
      # Roteador principal do Authentik
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      # Define o middleware de 'forward auth' que será usado por outros serviços
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name"

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    depends_on: [authentik-postgres, authentik-redis]
    command: worker
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - TZ=${TZ}
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - ./authentik/geoip:/geoip
    networks:
      - authentik-internal

  # -------------------- GUACAMOLE STACK --------------------
  guacamole-db:
    image: postgres:15-alpine
    container_name: guacamole-db
    restart: unless-stopped
    volumes:
      - guacamole-db-data:/var/lib/postgresql/data
      - ./guacamole/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=${GUACAMOLE_DB_NAME}
      - POSTGRES_USER=${GUACAMOLE_DB_USER}
      - POSTGRES_PASSWORD=${GUACAMOLE_DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - guacamole-internal

  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    networks:
      - guacamole-internal

  guacamole:
    image: guacamole/guacamole
    container_name: guacamole
    restart: unless-stopped
    depends_on: [guacd, guacamole-db]
    environment:
      - GUACD_HOSTNAME=guacd
      - POSTGRES_HOSTNAME=guacamole-db
      - POSTGRES_DATABASE=${GUACAMOLE_DB_NAME}
      - POSTGRES_USER=${GUACAMOLE_DB_USER}
      - POSTGRES_PASSWORD=${GUACAMOLE_DB_PASSWORD}
      - TZ=${TZ}
    networks:
      - proxy
      - guacamole-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.guacamole.rule=Host(`guacamole.${DOMAIN}`)"
      - "traefik.http.routers.guacamole.entrypoints=websecure"
      - "traefik.http.routers.guacamole.tls=true"
      - "traefik.http.services.guacamole.loadbalancer.server.port=8080"
      - "traefik.http.routers.guacamole.middlewares=authentik@docker"

  # -------------------- NGINX EM REDE SEPARADA --------------------
  nginx:
    image: nginx:alpine
    container_name: nginx-server
    restart: unless-stopped
    volumes:
      - ./nginx/html:/usr/share/nginx/html:ro
    networks:
      - nginx-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nginx-net"
      - "traefik.http.routers.nginx.rule=Host(`nginx.${DOMAIN}`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      # - "traefik.http.routers.nginx.middlewares=authentik@docker"

# -------------------- DEFINIÇÃO DAS REDES E VOLUMES --------------------
networks:
  proxy:
    name: proxy
  authentik-internal:
    internal: true
  guacamole-internal:
    internal: true
  nginx-net:
    name: nginx-net

volumes:
  authentik-db:
  guacamole-db-data:

